// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uimsg.proto

#ifndef PROTOBUF_uimsg_2eproto__INCLUDED
#define PROTOBUF_uimsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_uimsg_2eproto();
void protobuf_AssignDesc_uimsg_2eproto();
void protobuf_ShutdownFile_uimsg_2eproto();

class uimsg;

enum uimsg_type {
  uimsg_type_left_down = 1,
  uimsg_type_left_up = 2,
  uimsg_type_right_down = 3,
  uimsg_type_right_up = 4,
  uimsg_type_mouse_move = 5,
  uimsg_type_key_down = 6,
  uimsg_type_key_up = 7,
  uimsg_type_key_char = 8,
  uimsg_type_close_window = 9
};
bool uimsg_type_IsValid(int value);
const uimsg_type uimsg_type_type_MIN = uimsg_type_left_down;
const uimsg_type uimsg_type_type_MAX = uimsg_type_close_window;
const int uimsg_type_type_ARRAYSIZE = uimsg_type_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* uimsg_type_descriptor();
inline const ::std::string& uimsg_type_Name(uimsg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    uimsg_type_descriptor(), value);
}
inline bool uimsg_type_Parse(
    const ::std::string& name, uimsg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<uimsg_type>(
    uimsg_type_descriptor(), name, value);
}
// ===================================================================

class uimsg : public ::google::protobuf::Message {
 public:
  uimsg();
  virtual ~uimsg();
  
  uimsg(const uimsg& from);
  
  inline uimsg& operator=(const uimsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const uimsg& default_instance();
  
  void Swap(uimsg* other);
  
  // implements Message ----------------------------------------------
  
  uimsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uimsg& from);
  void MergeFrom(const uimsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef uimsg_type type;
  static const type left_down = uimsg_type_left_down;
  static const type left_up = uimsg_type_left_up;
  static const type right_down = uimsg_type_right_down;
  static const type right_up = uimsg_type_right_up;
  static const type mouse_move = uimsg_type_mouse_move;
  static const type key_down = uimsg_type_key_down;
  static const type key_up = uimsg_type_key_up;
  static const type key_char = uimsg_type_key_char;
  static const type close_window = uimsg_type_close_window;
  static inline bool type_IsValid(int value) {
    return uimsg_type_IsValid(value);
  }
  static const type type_MIN =
    uimsg_type_type_MIN;
  static const type type_MAX =
    uimsg_type_type_MAX;
  static const int type_ARRAYSIZE =
    uimsg_type_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_descriptor() {
    return uimsg_type_descriptor();
  }
  static inline const ::std::string& type_Name(type value) {
    return uimsg_type_Name(value);
  }
  static inline bool type_Parse(const ::std::string& name,
      type* value) {
    return uimsg_type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ui.uimsg.type required_type = 1;
  inline bool has_required_type() const;
  inline void clear_required_type();
  static const int kRequiredTypeFieldNumber = 1;
  inline ::ui::uimsg_type required_type() const;
  inline void set_required_type(::ui::uimsg_type value);
  
  // optional float optional_x = 2;
  inline bool has_optional_x() const;
  inline void clear_optional_x();
  static const int kOptionalXFieldNumber = 2;
  inline float optional_x() const;
  inline void set_optional_x(float value);
  
  // optional float optional_y = 3;
  inline bool has_optional_y() const;
  inline void clear_optional_y();
  static const int kOptionalYFieldNumber = 3;
  inline float optional_y() const;
  inline void set_optional_y(float value);
  
  // optional int32 optional_key = 4;
  inline bool has_optional_key() const;
  inline void clear_optional_key();
  static const int kOptionalKeyFieldNumber = 4;
  inline ::google::protobuf::int32 optional_key() const;
  inline void set_optional_key(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ui.uimsg)
 private:
  inline void set_has_required_type();
  inline void clear_has_required_type();
  inline void set_has_optional_x();
  inline void clear_has_optional_x();
  inline void set_has_optional_y();
  inline void clear_has_optional_y();
  inline void set_has_optional_key();
  inline void clear_has_optional_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int required_type_;
  float optional_x_;
  float optional_y_;
  ::google::protobuf::int32 optional_key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_uimsg_2eproto();
  friend void protobuf_AssignDesc_uimsg_2eproto();
  friend void protobuf_ShutdownFile_uimsg_2eproto();
  
  void InitAsDefaultInstance();
  static uimsg* default_instance_;
};
// ===================================================================


// ===================================================================

// uimsg

// required .ui.uimsg.type required_type = 1;
inline bool uimsg::has_required_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uimsg::set_has_required_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uimsg::clear_has_required_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uimsg::clear_required_type() {
  required_type_ = 1;
  clear_has_required_type();
}
inline ::ui::uimsg_type uimsg::required_type() const {
  return static_cast< ::ui::uimsg_type >(required_type_);
}
inline void uimsg::set_required_type(::ui::uimsg_type value) {
  GOOGLE_DCHECK(::ui::uimsg_type_IsValid(value));
  set_has_required_type();
  required_type_ = value;
}

// optional float optional_x = 2;
inline bool uimsg::has_optional_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uimsg::set_has_optional_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uimsg::clear_has_optional_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uimsg::clear_optional_x() {
  optional_x_ = 0;
  clear_has_optional_x();
}
inline float uimsg::optional_x() const {
  return optional_x_;
}
inline void uimsg::set_optional_x(float value) {
  set_has_optional_x();
  optional_x_ = value;
}

// optional float optional_y = 3;
inline bool uimsg::has_optional_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void uimsg::set_has_optional_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void uimsg::clear_has_optional_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void uimsg::clear_optional_y() {
  optional_y_ = 0;
  clear_has_optional_y();
}
inline float uimsg::optional_y() const {
  return optional_y_;
}
inline void uimsg::set_optional_y(float value) {
  set_has_optional_y();
  optional_y_ = value;
}

// optional int32 optional_key = 4;
inline bool uimsg::has_optional_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void uimsg::set_has_optional_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void uimsg::clear_has_optional_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void uimsg::clear_optional_key() {
  optional_key_ = 0;
  clear_has_optional_key();
}
inline ::google::protobuf::int32 uimsg::optional_key() const {
  return optional_key_;
}
inline void uimsg::set_optional_key(::google::protobuf::int32 value) {
  set_has_optional_key();
  optional_key_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ui

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ui::uimsg_type>() {
  return ::ui::uimsg_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uimsg_2eproto__INCLUDED
